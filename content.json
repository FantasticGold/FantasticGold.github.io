[{"title":"系统分析与设计 - 作业1","date":"2019-03-14T05:13:32.000Z","path":"2019/03/14/系统分析与设计-作业1/","text":"软件的本质与软件工程科学 软件工程IEEE：软件工程就是将系统化的、规范的、可度量的方法应用于软件的开发、运行、维护，即将工程化的方法应用于软件，同时软件工程还包括对这些方法的研究。","tags":[{"name":"系统分析与设计","slug":"系统分析与设计","permalink":"http://fantasticgold.github.io/tags/系统分析与设计/"}]},{"title":"Tic Tac Toe","date":"2019-01-21T17:19:12.000Z","path":"2019/01/22/Tic-Tac-Toe/","text":"Github地址：https://github.com/FantasticGold/Unity3D-Study 游戏玩法Tic Tac Toe即井字棋，两位玩家轮流行动，分别在空的格子中放入X和O，当九宫格中任意一行、一列或对角线上三个格子放入的符号都相同时，该玩家获胜。 游戏截图 实现步骤运行脚本新建main.cs脚本，添加到Camera上，当游戏运行时，就会运行main.cs脚本。 游戏逻辑在main.cs脚本中实现游戏逻辑。这里用到MonoBehaviour类的自带函数Start、OnGUI和Reset，其中Start只在脚本实例被启用时调用一次，OnGUI在渲染和处理GUI事件时调用，每帧执行一次，Reset只在编辑模式下被调用。 首先声明变量，包括当前回合玩家和获胜者，各行列的符号计数变量，GUI组件的大小、位置、内容等参数。 123public enum Player &#123; Player1, Player2, Empty, Draw &#125;;private Player curr_player;private Player winner; 然后在Start中初始化GUI组件的参数，调用Reset重置九宫格中的符号、符号计数变量、当前回合玩家以及获胜者。 在OnGUI中渲染GUI组件并处理按钮点击事件。当Reset按钮被点击时，重新开局；当空的格子被点击时，放入当前回合玩家的符号，更新符号计数变量并判断胜负，更新当前回合玩家。 最后，当游戏结束时，显示游戏结果。 生成应用File =&gt; Build Settings… 选择游戏发布平台以及存放路径，点击Build按钮生成可执行程序。 参考链接Unity-井字棋：https://xwy27.github.io/Unity-3d/%E4%BA%95%E5%AD%97%E6%A3%8B/index.html Unity脚本手册：http://docs.manew.com/Script/index.htm unity脚本执行顺序详解：https://blog.csdn.net/woailvmengmeng/article/details/28423039","tags":[{"name":"游戏","slug":"游戏","permalink":"http://fantasticgold.github.io/tags/游戏/"},{"name":"unity3d","slug":"unity3d","permalink":"http://fantasticgold.github.io/tags/unity3d/"}]},{"title":"幻想之源","date":"2019-01-21T03:05:56.000Z","path":"2019/01/21/幻想之源/","text":"2019年1月21日，我搭建了个人博客——幻想之源。 我在很久以前就想做这件事了，但一直没动手，一是因为懒，二是怕自己做不好。在此之前，我只用过Github和CSDN。Github适合挂项目，CSDN适合写随笔，对于我之前的状态来说，这两者已经足够了。而且我一直觉得，个人博客一定要从风格到内容都是独一无二的，就算做不到完美，也要让自己挑不出毛病，这显然要花费很多的时间和精力。 不过，我现在觉得，之前没有去做这件事，只是因为自己没有下定决心罢了。Github可以保存源码，但我几乎不去回顾；CSDN有满满的干货，但那并不是我想表达的全部。除了项目和技术，我需要一个地方来整理其它方面的思路。至于搭建独一无二的个人博客，这其实并不太难。网上有很多搭建博客的方法和技术，只要找一份模板就能保证达到最低要求，然后把细节调整一下就完成了。 我很早就给自己起了个名字，叫Gold。之后由于重名，又扩展为FantasticGold，即幻想G。那么，幻想之源，就是我的世界。","tags":[]}]