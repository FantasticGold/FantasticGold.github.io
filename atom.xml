<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>幻想之源</title>
  <icon>https://www.gravatar.com/avatar/57daba48dde6b5d9065c3ccc61898835</icon>
  <subtitle>时刻保持游刃有余的优雅</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fantasticgold.github.io/"/>
  <updated>2019-03-28T07:46:04.707Z</updated>
  <id>http://fantasticgold.github.io/</id>
  
  <author>
    <name>Gold</name>
    <email>fantasticgold@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>系统分析与设计 - 作业3</title>
    <link href="http://fantasticgold.github.io/2019/03/16/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1-%E4%BD%9C%E4%B8%9A3/"/>
    <id>http://fantasticgold.github.io/2019/03/16/系统分析与设计-作业3/</id>
    <published>2019-03-16T15:27:14.000Z</published>
    <updated>2019-03-28T07:46:04.707Z</updated>
    
    <content type="html"><![CDATA[<p>软件项目过程模型与规划</p><a id="more"></a><h2 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h2><p><strong>优点</strong>：</p><ul><li>为项目提供了按阶段划分的检查点</li><li>当前一阶段完成后，只需关注后续阶段</li><li>可以应用在迭代模型中</li><li>提供了一个模板，使得分析、设计、编码、测试和支持的方法有一个共同的指导</li></ul><p><strong>缺点</strong>：</p><ul><li>各阶段的划分完全固定，产生大量文档，极大地增加了工作量</li><li>由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加了开发风险</li><li>通过强制完成日期和里程碑来跟踪各个项目阶段</li><li>不适用用户需求的变化</li></ul><h2 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h2><p><strong>优点</strong>：</p><ul><li>将待开发的软件系统模块化，可以分批次提交软件产品，使用户可以及时了解软件项目的进度</li><li>以组件为单位进行开发降低了软件开发的风险，一个开发周期内的错误不会影响整个软件系统</li><li>开发顺序灵活，开发人员可以对组件的实现顺序进行优先级排序，优先完成需求稳定的核心组件，当组件的优先级发生变化时，还能及时对实现顺序作出调整</li></ul><p><strong>缺点</strong>：</p><ul><li>要求待开发的软件系统可以被模块化，如果待开发的软件系统很难被模块化，那么就会给增量开发带来很多麻烦</li></ul><h2 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h2><p><strong>优点</strong>：</p><ul><li>设计上具有灵活性，可以在项目的各个阶段进行变更</li><li>以小的分段来构建大型系统，使成本计算变得简单容易</li><li>客户始终参与每个阶段的开发，保证了项目不偏离正确方向以及项目的可控性</li><li>随着项目推进，客户始终掌握项目的最新信息，从而能够和管理层有效地交互</li><li>客户认可这种公司内部的开发方式带来良好的沟通和高质量的产品</li></ul><p><strong>缺点</strong>：</p><ul><li>很难让客户确信这种演化方法的结果是可控的 </li><li>建设周期长，而软件技术发展比较快，所以经常出现软件开发完毕后，和当前的技术水平有较大差距，无法满足当前用户需求</li></ul><h2 id="统一过程"><a href="#统一过程" class="headerlink" title="统一过程"></a>统一过程</h2><p><strong>三大特点</strong>：</p><ul><li><strong>用例驱动</strong>：开发过程是沿着一系列从用例得到的工作流前进的</li><li><strong>以架构为中心</strong>：首先创建一个粗略的软件架构轮廓，然后不断完善，最终得到稳定的架构</li><li><strong>迭代和增量</strong>：将软件开发划分为切实可行并能够产生增量的迭代过程</li></ul><p><strong>与面向对象方法的关系</strong>：</p><ul><li>统一过程是一个面向对象且基于网络的程序开发方法论，即面向对象的方法包含在统一过程的系统实现阶段</li></ul><p><strong>四个阶段</strong>：</p><ul><li>四个阶段是由各个阶段结束的里程碑划分的，每个阶段本质上是两个里程碑之间的时间跨度，在每个阶段的结尾进行一次评估以确定阶段目标是否已经满足，如果评估结果令人满意，就可以进入下一个阶段</li><li>各阶段的里程碑如下：<ul><li>初始阶段：生命周期目标里程碑</li><li>细化阶段：生命周期结构里程碑</li><li>构造阶段：初始功能里程碑</li><li>交付阶段：产品发布里程碑</li></ul></li></ul><h2 id="简答"><a href="#简答" class="headerlink" title="简答"></a>简答</h2><p><strong>软件企业为什么能按固定节奏生产、固定周期发布软件产品？统一过程给企业项目管理带来哪些好处？</strong></p><ul><li><p>因为软件企业依据统一过程的方法论来生产和发布软件产品。统一过程将软件生命周期分解为四个阶段，每一个阶段都可以进一步分解为迭代，只要固定迭代周期，就可以确定各阶段的时间长度，而每一个阶段都由里程碑划分，因此软件企业可以确定生产和发布的节奏和周期。</p></li><li><p>统一过程指导整个企业项目的开发活动，明确了软件生命周期的各个阶段，并为每个阶段成果的评估提供了标准。</p></li></ul><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;软件项目过程模型与规划&lt;/p&gt;
    
    </summary>
    
      <category term="作业" scheme="http://fantasticgold.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="系统分析与设计" scheme="http://fantasticgold.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>系统分析与设计 - 作业2</title>
    <link href="http://fantasticgold.github.io/2019/03/16/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1-%E4%BD%9C%E4%B8%9A2/"/>
    <id>http://fantasticgold.github.io/2019/03/16/系统分析与设计-作业2/</id>
    <published>2019-03-16T15:26:25.000Z</published>
    <updated>2019-03-19T10:07:12.089Z</updated>
    
    <content type="html"><![CDATA[<p>软件项目与知识团队管理基础</p><a id="more"></a><h2 id="分析与设计"><a href="#分析与设计" class="headerlink" title="分析与设计"></a>分析与设计</h2><ul><li><strong>分析</strong>（do the right thing）：对问题和需求进行调查研究，而不是寻找解决方案。</li><li><strong>设计</strong>（do the thing right）：构思解决问题的概念方案，而不是具体实现。</li></ul><h2 id="面向对象的分析与设计"><a href="#面向对象的分析与设计" class="headerlink" title="面向对象的分析与设计"></a>面向对象的分析与设计</h2><p>面向对象的分析与设计的优势在于两者使用同一种建模符号以简化过程的复杂性。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><strong>作用：</strong></p><ul><li>说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品</li></ul><p><strong>分类：</strong></p><p><img src="/2019/03/16/系统分析与设计-作业2/UML图.jpg" width="50%" height="50%"></p><h2 id="软件范围控制"><a href="#软件范围控制" class="headerlink" title="软件范围控制"></a>软件范围控制</h2><p>由于软件本身的复杂性、一致性、可变性、不可视性，软件范围中只有20%是与客户严格约定的，其余80%都是相对模糊的，因此关键在于围绕客户的目标，发现并满足客户感兴趣的内容。只要细化这20%的有效需求，就可以满足80%的客户需要，由此可见，软件范围控制是可行的。</p><h2 id="KANBAN"><a href="#KANBAN" class="headerlink" title="KANBAN"></a>KANBAN</h2><p><img src="/2019/03/16/系统分析与设计-作业2/KANBAN.png"></p><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p>《UML和模式应用》（中文版）P184 图16-5</p><p><img src="/2019/03/16/系统分析与设计-作业2/UML类图.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;软件项目与知识团队管理基础&lt;/p&gt;
    
    </summary>
    
      <category term="作业" scheme="http://fantasticgold.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="系统分析与设计" scheme="http://fantasticgold.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>系统分析与设计 - 作业1</title>
    <link href="http://fantasticgold.github.io/2019/03/14/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1-%E4%BD%9C%E4%B8%9A1/"/>
    <id>http://fantasticgold.github.io/2019/03/14/系统分析与设计-作业1/</id>
    <published>2019-03-14T05:13:32.000Z</published>
    <updated>2019-03-15T09:01:00.114Z</updated>
    
    <content type="html"><![CDATA[<p>软件的本质与软件工程科学</p><a id="more"></a><h2 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h2><p><strong>IEEE：</strong>软件工程就是将系统化的、规范的、可度量的方法应用于软件的开发、运行、维护，即将工程化的方法应用于软件，同时软件工程还包括对这些方法的研究。</p><h2 id="软件危机"><a href="#软件危机" class="headerlink" title="软件危机"></a>软件危机</h2><p><strong>本质原因：</strong></p><ul><li>落后的软件生产方式无法满足迅速增长的计算机软件需求</li></ul><p><strong>主要表现：</strong></p><ul><li>软件开发进度难以预测</li><li>软件开发成本难以控制</li><li>用户对产品功能难以满足</li><li>软件产品质量无法保证</li><li>软件产品难以维护</li><li>软件缺少适当的文档资料</li></ul><p><strong>解决方法：</strong></p><ul><li><strong>从其他工程中吸收成功经验。</strong>研究软件生产的客观规律，建立与系统化软件生产有关的概念、原则、方法、技术和工具，指导和支持软件系统的生产活动。</li><li><strong>使用软件工具辅助项目管理与技术生产。</strong>将软件生命周期各阶段使用的软件工具有机集合成为一个整体，形成能够连续支持软件开发与维护全过程的集成化软件支援环境。</li><li><strong>推进程序设计自动化进程。</strong>建立软件工业化生产体系，研究基于程序变换、自动生成和可重用软件等软件新技术。</li></ul><h2 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a>软件生命周期</h2><p>软件生命周期是软件从产生到报废或停止使用的生命周期，包括以下六个阶段：</p><ol><li>软件的定义及规划</li><li>需求分析</li><li>软件设计</li><li>程序编码</li><li>软件测试</li><li>运行维护</li></ol><h2 id="SWEBoK"><a href="#SWEBoK" class="headerlink" title="SWEBoK"></a>SWEBoK</h2><p><strong>软件工程实践知识域：</strong></p><ol><li><p><strong>软件需求 </strong>Software Requirements</p><p>表达了对解决现实世界问题的软件产品的要求和约束。</p></li><li><p><strong>软件设计</strong> Software Design</p><p>既包括定义一个系统或组件的架构、组件、接口以及其它特性的过程，又包括这个过程的产出。</p></li><li><p><strong>软件构造</strong> Software Construction</p><p>通过详细设计、编码、单元测试、集成测试、调试和验证来详细构造软件。</p></li><li><p><strong>软件测试</strong> Software Testing</p><p>通过有限的测试用例来动态验证程序的缺陷，评估并提升产品质量。</p></li><li><p><strong>软件维护</strong> Software Maintenance</p><p>包括增强现有功能，根据新的操作环境调整软件，以及修复漏洞。</p></li><li><p><strong>软件配置管理</strong> Software Configuration Management</p><p>通过识别在不同时刻的系统配置来系统地控制配置的更改，并在整个软件生命周期中维持完整性和可追溯性。</p></li><li><p><strong>软件工程管理</strong> Software Engineering Management</p><p>通过计划、协调、度量、报告、控制项目或程序来确保软件的开发和维护是系统的、规范的、可度量的。</p></li><li><p><strong>软件工程过程</strong> Software Engineering Process</p><p>涉及软件生命周期过程的定义、实现、评估、度量、管理和改进。</p></li><li><p><strong>软件工程模型与方法</strong>  Software Engineering Models and Methods</p><p>涉及多个生命周期阶段的主题，包括建模、模型类型、分析和软件开发方法。</p></li><li><p><strong>软件质量</strong> Software Quality</p><p>包括软件质量基础、软件质量管理工程和实践评估。</p></li><li><p><strong>软件工程职业实践</strong> Software Engineering Professional Practice</p><p>涉及软件工程师以专业、负责、道德的方式进行软件工程实践所必须具备的知识、技能、态度。</p></li></ol><p><strong>软件工程教育基础知识域：</strong></p><ol start="12"><li><p><strong>软件工程经济</strong> Software Engineering Economics</p><p>涉及在业务环境中作出决策，以使技术决策与组织的业务目标保持一致。</p></li><li><p><strong>计算基础</strong> Computing Foundations</p><p>为软件工程实践提供必要的计算知识，包括问题解决技巧、抽象、算法与复杂度、编程基础、并行计算与分布式计算基础、计算机组织结构、操作系统、网络通信。</p></li><li><p><strong>数学基础</strong> Mathematical Foundations</p><p>为软件工程实践提供必要的数学知识，包括集合、关系与函数、基本命题逻辑与谓词逻辑、证明技巧、图与树、离散型概率、语法与有限状态机、数论。</p></li><li><p><strong>工程基础</strong> Engineering Foundations</p><p>为软件工程实践提供必要的工程知识，包括经验方法与实验技巧、统计分析、测量与度量、工程设计、仿真与建模、根本原因分析。</p></li></ol><h2 id="CMMI"><a href="#CMMI" class="headerlink" title="CMMI"></a>CMMI</h2><ul><li><p><strong>Level 1 - 初始级</strong> Initial</p><p>软件过程是无序的，有时甚至是混乱的，对过程几乎没有定义，成功取决于个人努力 。管理是反应式的。</p></li><li><p><strong>Level 2 - 可管理级</strong> Managed</p><p>建立了基本的项目管理过程来跟踪费用、进度和功能特性。制定了必要的过程纪律，能重复早先类似应用项目取得的成功经验。</p></li><li><p><strong>Level 3 - 已定义级</strong> Defined</p><p>已将软件管理和工程两方面的过程文档化、标准化，并综合成该组织的标准软件过程。所有项目均使用经批准、剪裁的标准软件过程来开发和维护软件，软件产品的生产在整个软工过程是可见的。</p></li><li><p><strong>Level 4 - 量化管理级</strong> Quantitatively Managed</p><p>分析对软件过程和产品质量的详细度量数据，对软件过程和和产品都有定量的理解与控制。管理有一个作出结论的客观依据，管理能够在定量的范围内预测性能。</p></li><li><p><strong>Level 5 - 优化管理级</strong> Optimizing</p><p>过程的量化反馈和先进的新思想、新技术促使过程持续不断改进。</p></li></ul><h2 id="简述CMMI"><a href="#简述CMMI" class="headerlink" title="简述CMMI"></a>简述CMMI</h2><p>CMMI全称是Capability Maturity Model Integration，即能力成熟度模型集成，于1994年由美国国防部与卡内基-梅隆大学的软件工程研究中心以及美国国防工业协会共同开发和研制。CMMI的目的是帮助企业对软件工程过程从质量、时间、成本三个方面进行管理和改进，提升企业的能力，从而按时地、不超预算地开发出高质量的软件。其依据是：只要集中精力去建立有效的软件工程过程的基础结构，不断进行管理实践和过程改进，就可以克服软件开发中的困难。CMMI为改进一个组织的各种过程提供了一个单一的集成化框架，这个集成模型框架消除了各个模型的不一致性，减少了重复，增加了透明度和理解，因此能够从总体上改进组织的质量和效率。如今，CMMI是世界公认的软件产品进入国际市场的通行证，它不仅仅是对产品质量的认证，更是一种软件工程改善的途径。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;软件的本质与软件工程科学&lt;/p&gt;
    
    </summary>
    
      <category term="作业" scheme="http://fantasticgold.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
      <category term="系统分析与设计" scheme="http://fantasticgold.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Tic Tac Toe</title>
    <link href="http://fantasticgold.github.io/2019/01/22/Tic-Tac-Toe/"/>
    <id>http://fantasticgold.github.io/2019/01/22/Tic-Tac-Toe/</id>
    <published>2019-01-21T17:19:12.000Z</published>
    <updated>2019-01-22T06:26:50.213Z</updated>
    
    <content type="html"><![CDATA[<p>Github地址：<a href="https://github.com/FantasticGold/Unity3D-Study" target="_blank" rel="noopener">https://github.com/FantasticGold/Unity3D-Study</a></p><a id="more"></a><h1 id="游戏玩法"><a href="#游戏玩法" class="headerlink" title="游戏玩法"></a>游戏玩法</h1><p>Tic Tac Toe即井字棋，两位玩家轮流行动，分别在空的格子中放入<code>X</code>和<code>O</code>，当九宫格中任意一行、一列或对角线上三个格子放入的符号都相同时，该玩家获胜。</p><h1 id="游戏截图"><a href="#游戏截图" class="headerlink" title="游戏截图"></a>游戏截图</h1><p><img src="/2019/01/22/Tic-Tac-Toe/welcome.png" style="zoom:50"></p><p><img src="/2019/01/22/Tic-Tac-Toe/win.png" style="zoom:50"></p><p><img src="/2019/01/22/Tic-Tac-Toe/draw.png" style="zoom:50"></p><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><p>新建main.cs脚本，添加到Camera上，当游戏运行时，就会运行main.cs脚本。</p><h2 id="游戏逻辑"><a href="#游戏逻辑" class="headerlink" title="游戏逻辑"></a>游戏逻辑</h2><p>在main.cs脚本中实现游戏逻辑。这里用到MonoBehaviour类的自带函数<code>Start</code>、<code>OnGUI</code>和<code>Reset</code>，其中<code>Start</code>只在脚本实例被启用时调用一次，<code>OnGUI</code>在渲染和处理GUI事件时调用，每帧执行一次，<code>Reset</code>只在编辑模式下被调用。</p><p>首先声明变量，包括当前回合玩家和获胜者，各行列的符号计数变量，GUI组件的大小、位置、内容等参数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Player &#123; Player1, Player2, Empty, Draw &#125;;</span><br><span class="line"><span class="keyword">private</span> Player curr_player;</span><br><span class="line"><span class="keyword">private</span> Player winner;</span><br></pre></td></tr></table></figure><p><img src="/2019/01/22/Tic-Tac-Toe/declare_player.png" style="zoom:50"></p><p><img src="/2019/01/22/Tic-Tac-Toe/declare_count.png" style="zoom:50"></p><p><img src="/2019/01/22/Tic-Tac-Toe/declare_grid.png" style="zoom:50"></p><p>然后在<code>Start</code>中初始化GUI组件的参数，调用<code>Reset</code>重置九宫格中的符号、符号计数变量、当前回合玩家以及获胜者。</p><p><img src="/2019/01/22/Tic-Tac-Toe/reset.png" style="zoom:50"></p><p>在<code>OnGUI</code>中渲染GUI组件并处理按钮点击事件。当Reset按钮被点击时，重新开局；当空的格子被点击时，放入当前回合玩家的符号，更新符号计数变量并判断胜负，更新当前回合玩家。</p><p><img src="/2019/01/22/Tic-Tac-Toe/button.png" style="zoom:50"></p><p>最后，当游戏结束时，显示游戏结果。</p><p><img src="/2019/01/22/Tic-Tac-Toe/result.png" style="zoom:50"></p><h2 id="生成应用"><a href="#生成应用" class="headerlink" title="生成应用"></a>生成应用</h2><p>File =&gt; Build Settings…</p><p>选择游戏发布平台以及存放路径，点击Build按钮生成可执行程序。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>Unity-井字棋：<a href="https://xwy27.github.io/Unity-3d/%E4%BA%95%E5%AD%97%E6%A3%8B/index.html" target="_blank" rel="noopener">https://xwy27.github.io/Unity-3d/%E4%BA%95%E5%AD%97%E6%A3%8B/index.html</a></p><p>Unity脚本手册：<a href="http://docs.manew.com/Script/index.htm" target="_blank" rel="noopener">http://docs.manew.com/Script/index.htm</a></p><p>unity脚本执行顺序详解：<a href="https://blog.csdn.net/woailvmengmeng/article/details/28423039" target="_blank" rel="noopener">https://blog.csdn.net/woailvmengmeng/article/details/28423039</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Github地址：&lt;a href=&quot;https://github.com/FantasticGold/Unity3D-Study&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/FantasticGold/Unity3D-Study&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="项目" scheme="http://fantasticgold.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="游戏" scheme="http://fantasticgold.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="unity3d" scheme="http://fantasticgold.github.io/tags/unity3d/"/>
    
  </entry>
  
  <entry>
    <title>幻想之源</title>
    <link href="http://fantasticgold.github.io/2019/01/21/%E5%B9%BB%E6%83%B3%E4%B9%8B%E6%BA%90/"/>
    <id>http://fantasticgold.github.io/2019/01/21/幻想之源/</id>
    <published>2019-01-21T03:05:56.000Z</published>
    <updated>2019-01-21T16:41:08.546Z</updated>
    
    <content type="html"><![CDATA[<p>2019年1月21日，我搭建了个人博客——幻想之源。</p><a id="more"></a><p>我在很久以前就想做这件事了，但一直没动手，一是因为懒，二是怕自己做不好。在此之前，我只用过Github和CSDN。Github适合挂项目，CSDN适合写随笔，对于我之前的状态来说，这两者已经足够了。而且我一直觉得，个人博客一定要从风格到内容都是独一无二的，就算做不到完美，也要让自己挑不出毛病，这显然要花费很多的时间和精力。</p><p>不过，我现在觉得，之前没有去做这件事，只是因为自己没有下定决心罢了。Github可以保存源码，但我几乎不去回顾；CSDN有满满的干货，但那并不是我想表达的全部。除了项目和技术，我需要一个地方来整理其它方面的思路。至于搭建独一无二的个人博客，这其实并不太难。网上有很多搭建博客的方法和技术，只要找一份模板就能保证达到最低要求，然后把细节调整一下就完成了。</p><p>我很早就给自己起了个名字，叫Gold。之后由于重名，又扩展为FantasticGold，即幻想G。那么，幻想之源，就是我的世界。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019年1月21日，我搭建了个人博客——幻想之源。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://fantasticgold.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
